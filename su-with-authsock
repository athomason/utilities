#!/usr/bin/perl

# Opens a subshell as another user (a la su(1)), after making the SSH_AUTH_SOCK
# and/or .Xauthority files be usable by the target user. This allows ssh/X
# connections from the target user to be made using the source user's
# credentials.
#
# Restrictions:
#
# * Target user must be a member of the SSH_AUTH_SOCK owner's default group
# * If using sudo (the default), SSH_AUTH_SOCK must be included in env_keep in
#   sudoers

use strict;
use warnings;

use Getopt::Long;

GetOptions(
    'xauth!'    => \(my $xauth), # link .Xauthority file
    'fatal!'    => \(my $fatal), # die instead of warn on errors
    'verbose!'  => \(my $verbose),
);

sub error {
    unshift @_, shift() . "\n";
    $fatal ? die @_ : warn @_;
}
sub verbose {
    return unless $verbose;
    unshift @_, shift() . "\n";
    warn @_;
}

my $su = sub {
    exec qw( /usr/bin/sudo -i -u ), shift;
    # or 'su', 'su -', etc
};
my $ln = sub {
    my $user = shift;
    system qw( /usr/bin/sudo -u ), $user, qw( ln -nsf ), @_;
};

unless (@ARGV) {
    (my $me = $0) =~ s,.*/,,;
    die "usage: $me <username>\n";
}

my $user = shift;
verbose sprintf "Preparing to switch from %s to %s", (getpwuid $<)[0], $user;

share_auth_sock();
link_xauthority() if $xauth;
$su->($user);

sub share_auth_sock {
    verbose "Attempting to share authsock";

    my $auth_sock = $ENV{SSH_AUTH_SOCK};
    unless ($auth_sock && -w $auth_sock) {
        error "No writable \$SSH_AUTH_SOCK in environment";
        return;
    }

    verbose "\$SSH_AUTH_SOCK found: $auth_sock";

    my @stat = stat $auth_sock;

    # check that target user is in the group of the authsock
    unless (user_in_group_of_file($user, $auth_sock)) {
        error "$user is not a member of ${auth_sock}'s group; it will not be accessible";
        return;
    }
    verbose "$user is in ${auth_sock}'s group";

    (my $auth_dir = $auth_sock) =~ s,/[^/]+$,,;

    unless (ensure_perms(070, $auth_sock, $auth_dir)) {
        error "Failed to add group RWX permissions on $auth_dir/$auth_sock: $!";
        return;
    }
    verbose sprintf "Added group permissions on $auth_dir & $auth_sock";
}

sub link_xauthority {
    verbose "Attempting to link .Xauthority";

    # make source readable by group
    my @source_ent = getpwuid $<;
    my $source_home = $source_ent[7];
    my $source = "$source_home/.Xauthority";

    unless (-r $source) {
        error "$source is not readable";
        return;
    }

    unless (user_in_group_of_file($user, $source)) {
        error "$user is not a member of ${source}'s group; it will not be accessible";
        return;
    }
    verbose "$user is in ${source}'s group";

    unless (ensure_perms(060, $source)) {
        error "Failed to add group RW permissions on $source: $!";
        return;
    }

    my @target_ent = getpwnam $user;
    my $target_home = $target_ent[7];
    my $target = "$target_home/.Xauthority";

    if ($ln->($user, $source, $target)) {
        error "Failed to link $source to $target as $user";
        return;
    }

    unless (-l $target) {
        error "$target is not a symlink";
        return;
    }

    unless (readlink $target eq $source) {
        error "$target does not point to $source";
        return;
    }

    verbose "Linked $target -> $source";
}

sub user_in_group_of_file {
    my ($user, $file) = @_;
    my $gid = (stat $file)[5];
    my @group = getgrgid $gid;
    verbose "$file has group $group[0] ($gid)";
    my @members = split / /, (getgrgid $gid)[3];
    verbose "Group $group[0] contains [@members]";
    return grep({$_ eq $user} @members) ? 1 : 0;
}

sub ensure_perms {
    my ($perms, @files) = @_;
    for my $file (@files) {
        my $old_perms = (stat $file)[2];
        verbose sprintf "$file has permissions 0%o (need 0%o)", $old_perms, $perms;
        next if ($old_perms & $perms) == $perms;
        return 0 unless chmod $old_perms | $perms, $file;
    }
    return 1;
}
